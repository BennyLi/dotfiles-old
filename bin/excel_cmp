#!/bin/bash

#
# Excel compare tool which can utilize svn.
#
# Copyright (c) 2015 Benjamin Lindemann <benny@benny-li.de>
#    Uses ExcelCompare https://github.com/na-ka-na/ExcelCompare/releases/latest
#     and any 'svn' command line tool
#
# Licensed under the MIT License http://opensource.org/licenses/MIT
#

EXCEL_CMP_HOME="$HOME/share/ExcelCompare"
EXCEL_CMP_BIN="$EXCEL_CMP_HOME/bin/excel_cmp"
EXCEL_CMP_LATEST="https://github.com/na-ka-na/ExcelCompare/releases/latest"

function print_usage {
  echo "usage: $0 [svn] <filename> [other_filename] [-f <revision_from>] [-t <revision_to>]"
  echo ""
  echo "CLI Excel compare tool"
  echo "Type '$0 <filename> <other_filename>' to compare two local excel files."
  echo "Type '$0 svn <filename> -f <revision>' to compare a local excel file with a version from the svn history."
  echo "  or '$0 svn <filename> -f <revision_from> -t <revision_to>' to compare a remote excel file with another version from the svn history."
}

function ensure_binary {
  if [ ! -f "$EXCEL_CMP_BIN" ]; then
    echo "[ERROR] Did not found ExcelCmp bin at $EXCEL_CMP_BIN" >&2
    echo "Please download the ExcelCmp from $EXCEL_CMP_LATEST and extract its contents to $EXCEL_CMP_HOME" >&2
    exit 2
  fi
}

function check_args_for_help {
  if [ "$1" == "help" ]; then
    print_usage
    exit
  fi

  while getopts :h opt; do
    case $opt in
      h)
        print_usage
        exit
        ;;
    esac
  done

  if [ $# -lt 2 ]; then
    echo "[ERROR] Too few arguments given!" >&2
    print_usage
    exit 1
  fi
}

function compare {
  echo "Comparing files." >&2
  echo "[CMD] $EXCEL_CMP_BIN $@" >&2
  echo "$($EXCEL_CMP_BIN $@)"
}

function compare_svn {
  local revision_from revision_to file="$1" result
  shift
  while getopts :f:t opt; do
    case $opt in
      f)
        revision_from=$OPTARG
        ;;
      t)
        revision_to=$OPTARG
        ;;
    esac
  done

  if [ -e $revision_from ]; then
    echo "No revision given to compare the current file with!" >&2
    print_usage
    exit 1
  fi
  get_file_from_history $file $revision_from

  if [ ! -e $revision_to ]; then
    get_file_from_history $file $revision_to
    result="$(compare ${revision_from}_${file} ${revision_to}_${file})"
  else
    result="$(compare ${revision_from}_${file} ${file})"
  fi
  echo "Removing temporary files..."
  rm "${revision_from}_${file}"
  rm "${revision_to}_${file}"

  echo "Comparision results:"
  echo ""
  echo "$result"
}

function get_file_from_history {
  local file="$1" revision="$2"
  echo "Retriving old file from SVN..."
  echo "  Revision: $revision"
  echo "  Temporary file: ${revision}_${file}"
  echo ""
  echo "[CMD] svn cat ${file}@${revision} > ${revision}_${file}"
  svn cat "${file}@${revision}" > "${revision}_${file}"
}

ensure_binary

check_args_for_help "$@"

if [ "$1" == "svn" ]; then
  echo "SVN mode activated!"
  shift
  compare_svn "$@"
else
  compare "$@"
fi
